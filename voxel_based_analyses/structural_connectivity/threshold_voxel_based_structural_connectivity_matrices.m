function [] = threshold_voxel_based_structural_connectivity_matrices(subject,dataset,h5_file_ID)
% The purpose of this script is to take the structural connectivity matrices generated by MITTENS 
% (and converted into .mat format) and apply a density-threshold on them (currently 70%).
%
% Requirements:
% 1. The Python script: create_voxel_conn_matrix.py to generate
%    unthresholded connectivity matrices has been run
% 2. The MATLAB script convert_h5_voxel_based_structural_connectivity_to_mat.m
%    has been run.
%
% Inputs:
% 1. subject -> The subject ID of interest
% 2. dataset -> The dataset ID of interest; this was mainly for my benefit 
%               since I had 2 different datasets that I was analyzing in different directories; 
%               feel free to remove this input after adjusting the paths 
%				below to fit your data.
% 3. h5_file_ID -> The file ID of each .h5 file being considered (check the
%                  Python script create_voxel_conn_matrix.py for more
%                  details).
%
% Outputs:
% Same as the convert_h5_voxel_based_structural_connectivity_to_mat.m script 
% but with thresholded connectivity values.
%
% Author: Panagiotis Fotiadis, 2021-2023
%
% If parts of the following code are used, please cite the following paper:
%
% Fotiadis P, Cieslak M, He X, Caciagli L, Ouellet M, Satterthwaite TD, 
% Shinohara RT, and Bassett DS “Myelination and excitation-inhibition 
% balance synergistically shape structure-function coupling across the 
% human cortex,” (2023) Nature Communications.


% -------------------------------------------------------------------------

% Load the original structural connectivity file
og_sc_file = load(fullfile('/cbica/home/panosf/Q7/Q7_Dataset_'+string(dataset), 'Nifti', subject, 'mittens_results', string(subject)+'_edge_weights_mean_scores_n'+string(h5_file_ID)+'.mat'));

% Copy it into a new thresholded file
thresholded_sc_file = [];
thresholded_sc_file = og_sc_file;

% Define a threshold (basically, if threshold = N, then I will keep only
% the N% strongest edges of the connectome)
threshold = 70;

% Extract the threshold percentage strongest connections for each row (voxel):

% First, turn the matrix into a vector and sort it in descending order, and
% then set the lowest threshold percentage values into 0
for row = 1:size(og_sc_file.data,1)
    sorted_idx = [];
    
    % sort
    [~, sorted_idx] = sort(thresholded_sc_file.data(row,:),'ascend');
    
    % set the lowest threshold perc values to 0
    thresholded_sc_file.data(row,sorted_idx(1:ceil(length(sorted_idx)*((100-threshold)/100)))) = 0;
end

% temporary outputs
region_ids = [];
data = [];

region_ids = thresholded_sc_file.region_ids;
data = thresholded_sc_file.data;

% save the resulting file
save_path = ['/cbica/home/panosf/Q7/Q7_Dataset_' int2str(dataset) '/Nifti/' subject '/mittens_results/' subject '_edge_weights_mean_scores_threshold_' int2str(threshold) '_percent_n' int2str(h5_file_ID) '.mat'];
save(save_path, 'region_ids', 'data');
